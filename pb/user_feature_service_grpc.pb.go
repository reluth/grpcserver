// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: user_feature_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserFeatureServiceClient is the client API for UserFeatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFeatureServiceClient interface {
	AddUserFeature(ctx context.Context, in *AddUserFeatureRequest, opts ...grpc.CallOption) (*AddUserFeatureResponse, error)
	GetUserFeature(ctx context.Context, in *GetFeatureRequest, opts ...grpc.CallOption) (*GetFeatureResponse, error)
}

type userFeatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFeatureServiceClient(cc grpc.ClientConnInterface) UserFeatureServiceClient {
	return &userFeatureServiceClient{cc}
}

func (c *userFeatureServiceClient) AddUserFeature(ctx context.Context, in *AddUserFeatureRequest, opts ...grpc.CallOption) (*AddUserFeatureResponse, error) {
	out := new(AddUserFeatureResponse)
	err := c.cc.Invoke(ctx, "/reluth.grpcserver.UserFeatureService/AddUserFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFeatureServiceClient) GetUserFeature(ctx context.Context, in *GetFeatureRequest, opts ...grpc.CallOption) (*GetFeatureResponse, error) {
	out := new(GetFeatureResponse)
	err := c.cc.Invoke(ctx, "/reluth.grpcserver.UserFeatureService/GetUserFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFeatureServiceServer is the server API for UserFeatureService service.
// All implementations must embed UnimplementedUserFeatureServiceServer
// for forward compatibility
type UserFeatureServiceServer interface {
	AddUserFeature(context.Context, *AddUserFeatureRequest) (*AddUserFeatureResponse, error)
	GetUserFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error)
	mustEmbedUnimplementedUserFeatureServiceServer()
}

// UnimplementedUserFeatureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserFeatureServiceServer struct {
}

func (UnimplementedUserFeatureServiceServer) AddUserFeature(context.Context, *AddUserFeatureRequest) (*AddUserFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserFeature not implemented")
}
func (UnimplementedUserFeatureServiceServer) GetUserFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFeature not implemented")
}
func (UnimplementedUserFeatureServiceServer) mustEmbedUnimplementedUserFeatureServiceServer() {}

// UnsafeUserFeatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFeatureServiceServer will
// result in compilation errors.
type UnsafeUserFeatureServiceServer interface {
	mustEmbedUnimplementedUserFeatureServiceServer()
}

func RegisterUserFeatureServiceServer(s grpc.ServiceRegistrar, srv UserFeatureServiceServer) {
	s.RegisterService(&UserFeatureService_ServiceDesc, srv)
}

func _UserFeatureService_AddUserFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFeatureServiceServer).AddUserFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reluth.grpcserver.UserFeatureService/AddUserFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFeatureServiceServer).AddUserFeature(ctx, req.(*AddUserFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFeatureService_GetUserFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFeatureServiceServer).GetUserFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reluth.grpcserver.UserFeatureService/GetUserFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFeatureServiceServer).GetUserFeature(ctx, req.(*GetFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFeatureService_ServiceDesc is the grpc.ServiceDesc for UserFeatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFeatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reluth.grpcserver.UserFeatureService",
	HandlerType: (*UserFeatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserFeature",
			Handler:    _UserFeatureService_AddUserFeature_Handler,
		},
		{
			MethodName: "GetUserFeature",
			Handler:    _UserFeatureService_GetUserFeature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_feature_service.proto",
}
